---
title: "working_with_text"
format: html
editor: visual
---

First, install the packages you will likely need to conduct the text analysis.

```{r}
library(dplyr)
library(tidytext)
library(stringr)
```

# Text analysis

In this tutorial we are going to start working with the text that we scraped last time. We will take the tidy approach to text analysis because it is fairly intuitive in that it treats text as data frames for analysis.

Furthermore, the text converted into a data frame can be converted to a variety of formats that allow it to be analyzed by other popular ra programs such as quanteda. While the examples are different and we won't cover all of the topics in the book you can find much of this material in [**Text Mining with R**](https://www.tidytextmining.com/index.html "A Tidy Approach")**: A Tidy Approach** listed in the syllabus

This image from [**Text Mining with R**](https://www.tidytextmining.com/index.html "A Tidy Approach")**: A Tidy Approach** demonstrates the general overall process for text analysis using tidyverse:

![](Images/2.png)

## A Corpus

For our analysis we need text. The raw text is the corpus that we work on. The corpus that we are interested in varies depending on our research objectives. For example, a corpus can contain a newspaper article, multiple articles, tweets about a particular topic or from a group of people. How we put together the relevant corpus depends on the objective of our analysis.

### Working with pdf files

Text comes in many formats.  This section explains how to extract text from a PDF file (or multiple pdf files) into a corpus.  

For further information see:

https://data.library.virginia.edu/reading-pdf-files-into-r-for-text-mining/

#### 1:
```{r}
install.packages("pdftools")
library(pdftools)
```

####  2:
Create a vector of pdf file names from the pdf files in your directory
(remember to set the working directory to the directory where you are keeping your files)

```{r}
files <- list.files(pattern = "pdf$")
```


#### 3:
Extract the text from the pdf

```{r}
documents <- lapply(files, pdf_text)
```

####  4:

Verify and save

how many documents were read:

```{r, echo=FALSE}
length(documents)
```

The number of pages in each document
```{r, echo=FALSE}
lapply(documents, length) 
```
To see the documents
```{r, echo=FALSE}
documents
```

You can then save the pdf corpus in the same way that you saved the paragraph file.  Creating one variable out of each document

```{r, echo=FALSE}
all_docs <- as.data.frame(do.call(rbind, documents))
```

```{r, eval=FALSE}
save(all_docs, file="all_docs.RData")
```



# Cleaning

As an example, here we will use the newspaper article that we scraped.

The first step is to load the data that we saved in the last project. It was saved as an R Object, so we can load it the following way:

```{r}
load("multiple_url_paragraphs.RData")
```

This loads the saved R data object into our working environment to allow us to begin working with the data. As you can see, it's loaded as what we saved the object as previously, multi_df.

## Cleaning the Data

We now need to work on cleaning the data to render it into a format that we can use for text analysis. For this tutorial, we will be using the tidyverse text analysis method so begin by loading the tidytext package and installing it if not installed yet. This will be one of the core packages needed for our work.

```{r}
# install.packages("tidytext")
library(tidytext)
```

Now we can begin to work with the data and transform it into something usable.

Begin by tokenizing the data, or separating the paragraphs and sentences into words instead of the format they are currently in.

```{r}
tidy_paragraphs <- multi_df %>%
  unnest_tokens(word, text)
```

If we look at tidy_paragraphs, we can see that the text is broken down by word and noted by the paragraph it is found in:

![](Images/1.png)

Now we want to begin cleaning the corpus by removing unnecessary words. These are words that convey no meaningful information but appear frequently, usually referred to as "stop words" such as but, and, if, then, and similar words.

```{r}
tidy_paragraphs <- tidy_paragraphs %>%
  anti_join(stop_words)
```

This uses the "stop words" dataset from tidyverse to remove the most common stop words. 

ADD IN CLEANING THAT ISN'T JUST STOP WORDS

We can then look at the top words using the following function:

```{r, eval=FALSE}
tidy_paragraphs %>%
  count(word, sort = TRUE) 
```

This shows that the top words in these articles, with stop words removed, are Munich, western, Ukraine, war, countries, and Germany.

## Visualization

The most commonly used words can be visualized using a word cloud. Two packages, devtools and wordcloud2, are needed to do this.

```{r}
library(wordcloud2)
library(devtools)
```

First, we must figure out the word counts:

```{r}
t_para <- tidy_paragraphs %>%
  count(word, sort = TRUE) 
```

You can make a very simple wordcloud using the wordcloud2() function.

```{r}
wordcloud2(t_para)
```

This then outputs a simple wordcloud of the most commonly use words in our articles.

[ADD SUMMARY STATISTICS]

[ADD SENTIMENT ANALYSIS PORTION]